syntax = "proto3";

package heyifeng.v1.auth;

service Auth {
    rpc Auth(AuthRequest) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/v1/auth/authorize"
            body: "Auth"
        };
    }

    rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {

    }
}

message AuthRequest {
    string response_type = 1;  // code 表示要求返回授权码
    string client_id = 2;   // 客户端唯一id
    string redirect_uri = 3;  //下一步要跳转的网站, 请求者指定的网站 追加 code=AUTHORIZATION_CODE query 参数
    string scope = 4;       // 表示授权范围
}

message AuthResponse {

}

message GetTokenRequest {
    string client_id = 1;
    string client_secret = 2; // client_id 和 client_secret 是单个应用 唯一id
    string grant_type = 3;  // authorization_code 表示使用授权码方式 换取token, 和 refresh_token 用于刷新token
    string code = 4;        // 授权码
    string redirect_uri = 5; // 成功, 会让此uri 追加 一段json
    string refresh_token = 6;   // 用于从此token, 拿到新的 token
}

message TokenInfo {
    string access_token = 1; // 每个api 请求都放在请求头 Authorization: Bearer {access_token} 
    string token_type = 2; // bearer类型的token(只签名, 需要加密配置tls使用) 和mac 类型的token(应对不安全的网络http协议, 相比bearer 还需要时间戳, nonce, 客户度mac信息)
    int64 expires_in = 3;
    string refresh_token = 4;
    string scope = 5;
    string uid = 6;     // 需要这个?
    map<string, string> info = 7;
}


// Generated according to https://cloud.google.com/apis/design/standard_methods
service TypeService {
  rpc ListTypes(ListTypesRequest) returns (ListTypesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/Types"
    };
  }

  rpc GetType(GetTypeRequest) returns (Type) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=Types/*}"
    };
  }

  rpc CreateType(CreateTypeRequest) returns (Type) {
    option (google.api.http) = {
      post: "/v1alpha1/Types"
      body: "Type"
    };
  }

  rpc UpdateType(UpdateTypeRequest) returns (Type) {
    option (google.api.http) = {
      patch: "/v1alpha1/{Type.name=Types/*}"
      body: "Type"
    };
  }

  rpc DeleteType(DeleteTypeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=Types/*}"
    };
  }
}

// message Type {
// ! This should be defined elsewere
// }

message ListTypesRequest {
  // The parent resource name, for example, "shelves/shelf1"
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListTypesResponse {
  // The field name should match the noun "Type" in the method name.
  // There will be a maximum number of items returned based on the page_size field in the request.
  repeated Type Types = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}

message GetTypeRequest {
  // The field will contain name of the resource requested.
  string name = 1;
}

message CreateTypeRequest {
  // The parent resource name where the Type is to be created.
  string parent = 1;

  // The Type id to use for this Type.
  string Type_id = 2;

  // The Type resource to create.
  // The field name should match the Noun in the method name.
  Type Type = 3;
}

message UpdateTypeRequest {
  // The Type resource which replaces the resource on the server.
  Type Type = 1;

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  FieldMask update_mask = 2;
}

message DeleteTypeRequest {
  // The resource name of the Type to be deleted.
  string name = 1;
}

