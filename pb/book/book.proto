syntax = "proto3";

package book.v1;

option go_package = "github.com/ifls/apis/golang/book";

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";

option java_package ="";
option java_outer_classname="";

service BookService {
    // 标准方法
    rpc CreateBook(CreateBookRequest) returns (CreateBookResponse) {
        option (google.api.http) = {
            post: "/v1/books"
            body: "*"  // post body是必须有的， 不然不会解析body ，delete 和get 方法不能有body
        };
    }

    rpc DeleteBook(DeleteBookRequest) returns (DeleteBookResponse) {
        option (google.api.http) = {
            delete: "/v1/books/{id=*}"
        };
    }

    // 保证原子更新
    rpc UpdateBook(UpdateBookRequest) returns (UpdateBookResponse) {
        option (google.api.http) = {
            put: "/v1/books/{book.id=*}"
            body: "*"
        };
    }

    rpc GetBook(GetBookRequest) returns (GetBookResponse) {
        option (google.api.http) = {
            get: "/v1/books/{id=*}"
        };
    }

    rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {
        option (google.api.http) = {
            get: "/v1/books"
        };
    }

    // 非标准方法
    // 撤销删除，如果支持标记删除
    rpc UndeleteBook(UndeleteBookRequest) returns (UndeleteBookResponse) {
        option (google.api.http) = {
            post: "/v1/books/{id=*}"
            body: "*"
        };
    }
    rpc SearchBook(SearchBookRequest) returns (SearchBookResponse) {
        option (google.api.http) = {
            get: "/v1/books"
        };
    }
    rpc BatchGetBook(BatchGetBookRequest) returns (BatchGetBookResponse) {
        option (google.api.http) = {
            get: "/v1/books:search"
        };
    }
}

message CreateBookRequest {
    Book book = 1;
}

message CreateBookResponse {
    Book book = 1;
}

message DeleteBookRequest {
    string id = 1;
}

message DeleteBookResponse {
    bool success = 1;
}

message GetBookRequest {
    string id = 1;
}

message GetBookResponse {
    Book book = 1;
}

// Required. IDs of the [Photos][google.streetview.publish.v1.Photo]. HTTP GET
// requests require the following syntax for the URL query parameter:
// `photoIds=<id1>&photoIds=<id2>&...`.
message BatchGetBookRequest {
    repeated string book_ids = 1;
}

message BatchGetBookResponse {
    repeated BookResponse results = 1;
}

message BookResponse {
    google.rpc.Status status = 1;

    Book book = 2;
}

message Book {
    string id = 1;  // 唯一id， 业务无关
    string snic = 2;  // 唯一id，业务相关
    string name = 3;        // 书名
    string publisher = 4;   // 出版社
    int64 publish_time = 5; // 出版日期

    Author author = 6; // 作者
    string version = 7;  // 版本

    float rate = 9; //评分
}

message Author {
    string name = 1;
    string english_name = 2;
}

message UpdateBookRequest {
    Book book = 1;
    google.protobuf.FieldMask field_mask = 2;
}

message UpdateBookResponse {
    bool success = 1;
}

message ListBooksRequest {
    string order_by = 1;  // 和sql 语句的 一样
    string page_token = 2;
    int32 page_size = 3;
}

message ListBooksResponse {
    repeated Book books = 1;
    string next_page_token = 2;
}

message UndeleteBookRequest {
    string id = 1;
}

message UndeleteBookResponse {
    bool success = 1;
}

message SearchBookRequest {
    string order_by = 1;  // 和sql 语句的 一样
    string page_token = 2;
    int32 page_size = 3;

    string match = 4; // 模糊匹配
}

message SearchBookResponse {
    repeated Book books = 1;
    string next_page_token = 2;
}
